#!/usr/bin/env ruby

require 'rubygems'
require 'tokyocabinet'
require 'socket'
require 'digest/md5'
require 'json'
require 'logger'
require 'fileutils'

include TokyoCabinet

app = {

  :databases       => { },
  :eot             => "\004",
  :must_stop       => false,
  :name            => 'borium',
  :nothing_counter => 0,

  :status => {
    :error      => 'error',      # get
    :found      => 'found',      # get
    :nothing    => 'nothing',    # get
    :stored     => 'stored',     # put
    :unparsable => 'unparsable'  # get
  },

  :config => {
    'connections' => 1000,
    'host'        => 'localhost',
    'log'         => 'STDOUT',
    'port'        => 8200,
    'storage'     => '/tmp/borium/'
  }

} 

configuration_file = "/etc/#{app[:name]}/configuration.json"

if File.exists?(configuration_file)
  config = JSON.parse(File.read(configuration_file))
else
  config = app[:config]
end

if File.exists?(config['log'])
  logger = Logger.new(config['log'])
else
  logger = Logger.new(STDOUT)
end

terminate = Proc.new do
  puts 'Bye.'
  app[:must_stop] = true
  logger.warn 'Going down.'
  app[:databases].each do |key, hdb|
    logger.warn "syncronize hdb: #{key}"
    hdb.close
  end
  exit 0
end

trap('TERM', &terminate)
trap('INT',  &terminate)
trap('QUIT', &terminate)

def generate_key
  Digest::MD5.hexdigest(
    Time.now.to_f.to_s + '-' + (1..100).to_a.shuffle.first.to_s
  )
end

FileUtils.mkdir_p(config['storage'])
server = TCPServer.open config['host'], config['port']
server.listen(config['connections'])

logger.info 'Server started'

config.each do |key, value|
  logger.info "CONFIG: #{key} => #{value}"
end

loop do
  break if app[:must_stop]

  client = server.accept
  data   = ''

  while line = client.gets
    data << line
    break if line.include?(app[:eot])
  end

  chunks   = data.split(':')
  response = {}

  # respond with error if "job_type" was not given.
  if chunks.size < 3
    response[:status] = app[:status][:unparsable]
    begin
      client.puts response.to_json
      client.close
    rescue => e
      logger.warn 'Client closed the connection.'
    end
    logger.error "wrong request: #{chunks.inspect}"
    next
  end

  request  = chunks.shift
  job_type = chunks.shift

  unless app[:databases][job_type]
    app[:databases][job_type] = HDB::new
    app[:databases][job_type].open(
      "#{config['storage']}/#{job_type}.job.tch",
      HDB::OCREAT | HDB::OWRITER
    )
  end

  db = app[:databases][job_type]

  if (request == 'put')
    db.put(generate_key, chunks.join(':').gsub(app[:eot], '').gsub(/\n$/, ''))
    response[:status] = app[:status][:stored]
  else
    db.iterinit
    key = db.iternext
    job = db.get(key)
    if job
      response[:status] = app[:status][:found]
      response[:job] = job
      db.out(key)
    else
      response[:status] = app[:status][:nothing]
    end
  end
  result = response.to_json
  begin
    client.puts(result)
    client.close
  rescue => e
    logger.warn 'Client closed the connection.'
  end
  if response[:status] == app[:status][:nothing]
    app[:nothing_counter] += 1 
    if app[:nothing_counter] > 5000
      logger.info "ok #{request} #{job_type} #{db.rnum.to_s} 5K => #{result}"
      app[:nothing_counter] = 0
    end
  else
    logger.info "ok #{request} #{job_type} #{db.rnum.to_s} #{result}"
  end
end


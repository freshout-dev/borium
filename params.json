{"name":"Borium","tagline":"Borium - Distributed background engine.","body":"## What is Borium\r\n\r\nBorium is a lean queue job library to execute jobs in the background of web applications. It plays well with JavaScript, Python, Ruby, Bash.\r\n\r\nIt’s got two parts\r\n\r\n**The Server:** In charge to keep the pending tasks organized and acts as the central task broker.\r\n\r\n**The Worker:** Processing unit that run the actual tasks.\r\n\r\n## What’s it for?\r\n\r\nThe general use case of Borium is to execute tasks in the background of the web server.\r\n\r\nIt does this efficiently without replicating the entire processing stack. This is accomplished by using lite and specialized workers for every different type of tasks.\r\n\r\nBecause of it’s simple API, you have a lot of flexibility to integrate Borium for uses beyond just background jobs.\r\n\r\nHow does stack up against all the other queue libraries?\r\n\r\n[demo goes here] \r\n\r\n\r\n## What Makes it Special?\r\n\r\n### Distributed\r\n\r\nBorium is distributed out of the box so you can start with a few workers, and then scale to a cluster of computers to scale.\r\n\r\n### Auto Balanced\r\n\r\nThe workers get tasks only when they are free to execute a new job, if more jobs are on the line then more workers can come to handle them.\r\n\r\n### Resilient \r\n\r\nEven if the machine crashes or is turned off, it will continue right where it was at as soon as it gets restarted.\r\n\r\n### Easy integration\r\n\r\nWith a very simple API and a simple text messaging system, Borium can be easily integrated on every framework, no matter the language.\r\n\r\n## Getting Started\r\n\r\n### Installation\r\n\r\n### Configuration\r\n### Simple\r\n### Multiple\r\n### Specialized\r\n\r\n## Use Cases\r\n\r\n### Background Jobs\r\n\r\nWhen a request to your application needs to perform a task that may take more than a couple of seconds, it is very important to release the web server to handle other requests. You can delegate this tasks to borium and let it handle the tasks.\r\n\r\nCheck the example at: \r\nhttps://github.com/freshout-dev/deprecated-borium/tree/visualization/examples/bg1\r\n\r\n### Priority Queues\r\n\r\nThere are many situations when a task needs to be solved right away. You can create a set of workers specialized for high priority tasks and execute them before the low priority ones without special configurations.\r\n\r\n### Check the example at: \r\nhttps://github.com/freshout-dev/deprecated-borium/tree/visualization/examples/pr1\r\n\r\n### Image Processing\r\n\r\nImage processing is very intensive on computer resources. You can easily scale these types of applications with Borium with one or more specialized workers across different computers.\r\n\r\nCheck the example at: \r\nhttps://github.com/freshout-dev/deprecated-borium/tree/visualization/examples/im1\r\n\r\n### Scheduled Jobs\r\n\r\nWhen you want to deliver a mail, or a notification at a certain time to a user at a specified time. Let Borium do the job without cluttering your server and without other libraries.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}